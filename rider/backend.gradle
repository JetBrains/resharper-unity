def backendGroup = 'backend'

import com.jetbrains.rider.plugins.gradle.BackendPaths
import com.jetbrains.rider.plugins.gradle.tasks.*

ext.backend = new BackendPaths(project, logger, ext.repoRoot, ext.productVersion)

nuget {
    version = "4.9.4"
}

task prepareRiderBuildProps(type: GenerateDotNetSdkPathPropsTask) {
    dotNetSdkPath { backend.getDotNetSdkPath() }
}

task prepareNuGetConfig(type: GenerateNuGetConfig) {
    dependsOn prepareRiderBuildProps
    dotNetSdkPath { backend.getDotNetSdkPath() }
}

task buildReSharperHostPlugin(type: DotNetBuildTask) {
    group backendGroup
    description 'Builds the full ReSharper backend plugin solution'
    dependsOn prepareNuGetConfig, generateModel

    buildFile = backend.resharperHostPluginSolution
}

task buildUnityEditorPlugin(type: DotNetBuildTask) {
    group backendGroup
    description 'Builds the Unity editor plugin'
    dependsOn prepareNuGetConfig, generateModel

    buildFile = backend.unityPluginSolution
}


task packReSharperPlugin(type: nugetPack.class) {
    dependsOn buildReSharperHostPlugin
    group = backendGroup
    description = 'Packs resulting DLLs into a NuGet package which is an R# extension.'

    def changelogNotes = changelog.get(productVersion).withFilter({ line ->
        !line.startsWith("- Rider:") && !line.startsWith("- Unity editor:")
    }).toPlainText().trim()
    def ReleaseNotes = """New in $productVersion

${changelogNotes}

See CHANGELOG.md in the JetBrains/resharper-unity GitHub repo for more details and history."""

    nuspecFile = new File(backend.backendRoot, 'resharper-unity/src/resharper-unity.resharper.nuspec')
    destinationDir = new File(backend.backendRoot, "build/distributions/$BuildConfiguration")
    packageAnalysis = false
    packageVersion = version
    properties = [
            'Configuration': BuildConfiguration,
            'ReleaseNotes': ReleaseNotes
    ]

    def nuPkgFile = file(new File(destinationDir as String, "JetBrains.Unity.${version}.nupkg"))
    outputs.files(nuPkgFile)

    doFirst {
        buildServer.progress("Packing: $nuspecFile.name")
    }
}

task nunitReSharperYaml(type: nunit.class) {
    shadowCopy false
    outputs.upToDateWhen { false }

    def buildDir = new File(backend.repositoryRoot, "resharper/build")
    def testDll = new File(buildDir, "tests.resharper-yaml/bin/$BuildConfiguration/net461/JetBrains.ReSharper.Plugins.Yaml.Tests.ReSharper.dll")
    testAssemblies = [ testDll ]
}

task nunitRiderYaml(type: nunit.class) {
    shadowCopy false
    outputs.upToDateWhen { false }

    def buildDir = new File(backend.repositoryRoot, "resharper/build")
    def testDll = new File(buildDir, "tests.rider-yaml/bin/$BuildConfiguration/net461/JetBrains.ReSharper.Plugins.Yaml.Tests.Rider.dll")
    testAssemblies = [ testDll ]
}

task nunitReSharperUnity(type: nunit.class) {
    shadowCopy false
    outputs.upToDateWhen { false }
    useX86 true
    def buildDir = new File(backend.repositoryRoot, "resharper/build")
    def testDll = new File(buildDir, "tests.resharper-unity/bin/$BuildConfiguration/net461/JetBrains.ReSharper.Plugins.Unity.Tests.ReSharper.dll")
    testAssemblies = [ testDll ]
}

task nunitRiderUnity(type: nunit.class) {
    shadowCopy false
    outputs.upToDateWhen { false }
    useX86 true

    def buildDir = new File(backend.repositoryRoot, "resharper/build")
    def testDll = new File(buildDir, "tests.rider-unity/bin/$BuildConfiguration/net461/JetBrains.ReSharper.Plugins.Unity.Tests.Rider.dll")
    testAssemblies = [ testDll ]
}

task runNunit {
    // nunit3 defaults to running test assemblies in parallel, which causes problems with shared access to databases
    // The nunit plugin doesn't have the ability to disable this, so we'll do it long hand...
    dependsOn buildReSharperHostPlugin, nunitReSharperYaml, nunitRiderYaml, nunitReSharperUnity, nunitRiderUnity
}

task publishCiBackendArtifacts {
    inputs.files(packReSharperPlugin.outputs)

    doLast {
        buildServer.publishArtifact(packReSharperPlugin.outputs.files.singleFile)
    }
}
