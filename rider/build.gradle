import org.apache.tools.ant.taskdefs.condition.Os
import com.jetbrains.rider.plugins.gradle.buildServer.BuildServerKt

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'org.jetbrains.intellij' // Version comes from buildSrc
    id 'org.jetbrains.changelog' version '0.3.2'
    id 'com.jetbrains.rdgen' version '0.203.154'
    id 'com.ullink.nuget' version '2.18'
    id 'com.ullink.nunit' version '2.0'
    id 'me.filippov.gradle.jvm.wrapper' version '0.9.3'
}


ext.repoRoot = project.file("..")
ext.isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
ext.bundledRiderSdkRoot = new File(projectDir, "dependencies")  // SDK from TC configuration/artifacts
ext.pluginVersion = ext.productVersion + "." + ext.maintenanceVersion

repositories {
    maven { url "https://cache-redirector.jetbrains.com/intellij-repository/snapshots" }
    maven { url "https://cache-redirector.jetbrains.com/maven-central" }
    maven { url "https://cache-redirector.jetbrains.com/dl.bintray.com/kotlin/kotlin-eap" }
}

configurations {
    resharper
}

dependencies {
    // Compile time dependencies for testng 7.1.0, provided by the Rider SDK. Looks like the problem is fixed in 7.2
    // https://github.com/cbeust/testng/issues/2223
    testCompile group:"com.beust", name:"jcommander", version:"1.78"
    testCompile group:"com.google.inject", name:"guice", version:"4.2.2"
    resharper group: "com.jetbrains.intellij.resharper", name: "resharperUltimatePackages", version: "${productVersion}-SNAPSHOT", ext: "zip"
}

wrapper {
    gradleVersion = '5.6.2'
    distributionUrl = "https://cache-redirector.jetbrains.com/services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

version "${pluginVersion}.$BuildCounter"

ext.buildServer = BuildServerKt.initBuildServer(gradle)
if (buildServer.automatedBuild) {
    BuildConfiguration = "Release"
}

buildSearchableOptions.enabled = BuildConfiguration == "Release"

logger.lifecycle("version=$version")
logger.lifecycle("BuildConfiguration=$BuildConfiguration")

changelog {
    path = "../CHANGELOG.md"
    headerFormat = "{0}"
}

apply from: 'model.gradle'
apply from: 'backend.gradle'
apply from: 'frontend.gradle'


// Tasks:
//
// When running in CI, we call `gradle buildPlugin`
// When running interactively, we call `gradle runIde`
// We can pass `-PdotNetUpToDate=true` to skip building dotnet things, as the no-op build is REALLY slow
//
// `buildPlugin` depends on `prepareSandbox` and then zips up the sandbox dir and puts the file in rider/build/distributions
// `runIde` depends on `prepareSandbox` and then executes IJ inside the sandbox dir
// `prepareSandbox` depends on the standard Java `jar` task and then copies everything into the sandbox dir
//
// `buildPlugin`, `runIde` and `prepareSandbox` are provided by the intellij gradle plugin
//
// When running in CI, the CI tasks will publish build version and the ReSharper artifacts
// When calling `buildPlugin`, the CI tasks force building the ReSharper artifacts
// When calling `runIde`, we only need to build Rider, debugger and Unity editor bits


// Used by CI to resolve the dependencies before anything else. Allows us to get this out of the way, makes reporting
// a little easier
task resolveDependencies {
  description 'Resolves all projects dependencies from the repository'
  group 'Build Server'

  doLast {
    rootProject.allprojects { project ->
      project.buildscript.configurations.forEach { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }

      project.configurations.forEach { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }
    }
  }
}

task publishCiBuildNumber {
    doLast {
        buildServer.buildNumber = version
    }
}

task publishCiBuildData {
    dependsOn publishCiBuildNumber, publishCiBackendArtifacts
}

// Temporary workaround - we don't have full build data on any other platform than Windows, because the
// ReSharper solution causes msbuild to crash on non-Windows platforms thanks to obfuscated assemblies
if (buildServer.automatedBuild && ext.isWindows) {
    buildPlugin.finalizedBy publishCiBuildData
}
