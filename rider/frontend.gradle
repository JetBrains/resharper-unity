sourceSets {
    test {
        java.srcDir 'testSrc'
        resources.srcDir 'testData'
    }
}

def dependenciesDir = new File("dependencies")

intellij {
    type = 'RD'

    // Download a version of Rider to compile and run with. Either set `version` to
    // 'LATEST-TRUNK-SNAPSHOT' or 'LATEST-EAP-SNAPSHOT' or a known version.
    // This will download from www.jetbrains.com/intellij-repository/snapshots or
    // www.jetbrains.com/intellij-repository/releases, respectively.
    // http://jetbrains-com-mirror.labs.intellij.net/intellij-repository/snapshots/
    // Note that there's no guarantee that these are kept up to date
    // version = 'LATEST-TRUNK-SNAPSHOT'
    // If the build isn't available in intellij-repository, use an installed version via `localPath`
    // localPath = '/Users/matt/Library/Application Support/JetBrains/Toolbox/apps/Rider/ch-1/171.4089.265/Rider EAP.app/Contents'
    // localPath = "F:\\RiderSDK"

    if (dependenciesDir .exists()) {
        localPath = dependenciesDir.absolutePath
    } else {
        version = "2018.1-SNAPSHOT"
    }

    // intellijRepo = "https://www.jetbrains.com/intellij-repository"

    // Sources aren't available for Rider
    downloadSources = false
}

def frontendSdkRoot = dependenciesDir
// bundled build configuration on TC
if (dependenciesDir.exists() && dependenciesDir.isDirectory()) {
    logger.lifecycle("dependencies dir found, using as frontend SDK root")    
}
else {
    def frontendSdkVersion = "2018.1-SNAPSHOT"
    // rider/build/riderRD-2018.1-SNAPSHOT
    def frontendSdkDirs = []
    def frontendSdkSearchPath = new File(repoRoot, "rider/build")
    logger.lifecycle("listing $frontendSdkSearchPath.path:")
    fileTree(frontendSdkSearchPath).visit {
        if (it.isDirectory()){
            if (it.name.startsWith("riderRD"))
                frontendSdkDirs << it
            logger.lifecycle("DIR:  $it.name")
        }
    }

    if (frontendSdkDirs.size() > 0) {
        assert frontendSdkDirs.size() == 1

        def frontendSdkSingleDir = frontendSdkDirs.first()
        def match = frontendSdkSingleDir.name =~ /riderRD-(.+)/
        assert match.matches()

        frontendSdkVersion = match[0][1]
    }

    frontendSdkRoot = new File(frontendSdkSearchPath, "riderRD-$frontendSdkVersion")
}

ext.rdLibDirectory = new File(frontendSdkRoot, "lib/rd").canonicalFile

ext.kotlin_version = '1.2.10'
ext.unityeditorplugin_path = "$projectDir/../unity/Assets/Plugins/Editor/JetBrains/JetBrains.Rider.Unity.Editor.Plugin.Repacked.dll"
ext.unity_full_editorplugin_path = "$projectDir/../unity/Assets/Plugins/Editor/JetBrains/JetBrains.Rider.Unity.Editor.Plugin.Full.Repacked.dll"

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs rdLibDirectory.absolutePath
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
}

task generateModel {
    group = 'other'
    description = 'Generates protocol models.'

    doLast {
        assert rdLibDirectory.isDirectory()

        def rdgenJar = new File(rdLibDirectory.absolutePath, "rd-gen.jar")
        assert rdgenJar.isFile()

        // TODO: spaces
        def modelDir = new File(repoRoot, "rider/protocol/src/main/kotlin/model")
        def csOutput = new File(repoRoot, "resharper/src/resharper-unity/RdUnityProtocol")
        def ktOutput = new File(repoRoot, "rider/src/main/kotlin/com/jetbrains/rider/plugins/unity/RdUnityProtocol")
        def packageName = "model"

        def cpSeparator = isWindows ? ";" : ":"
        def compilerClasspath = "$rdLibDirectory/rd-gen.jar$cpSeparator$rdLibDirectory/rider-model.jar"
        def rdGenClasspath = files(compilerClasspath)

        javaexec {
            main = "com.jetbrains.rider.generator.nova.MainKt"
            classpath = rdGenClasspath
            systemProperty "model.out.src.cs.dir", "$csOutput"
            systemProperty "model.out.src.kt.dir", "$ktOutput"
            errorOutput = System.out // kotlin throws warnings in stderr which causes appveyor build to fail
            args = [
                "-v", // verbose
                "--compiler-classpath=$compilerClasspath",
                "--source=${modelDir}/rider",
                "--packages=${packageName}.rider"
            ]
        }

        // TODO: if placed in one dir with different packages there will be generator clash
        javaexec {
            main = "com.jetbrains.rider.generator.nova.MainKt"
            classpath = rdGenClasspath
            errorOutput = System.out // kotlin throws warnings in stderr which causes appveyor build to fail
            args = [
                "-v", // verbose
                "--compiler-classpath=$compilerClasspath",
                "--source=${modelDir}/editorPlugin",
                "--packages=${packageName}.editorPlugin"
            ]
        }
    }
}

task prepareForBuild{
    dependsOn generateModel

    group = "intellij"
    description = "Checks that backend is built and updates plugin.xml with IDEA and plugin versions."
    doLast {
        def pluginXml = new File("src/main/resources/META-INF/plugin.xml")
        assert pluginXml.isFile()
        def tempXml = new File(pluginXml.path + ".tmp")

        copy {
            from pluginXml.parent
            into pluginXml.parent
            include pluginXml.name
            rename(pluginXml.name, tempXml.name)

            filter { line -> line.replaceAll(/<version>((\d+\.)+\d+)<\/version>/, "<version>$version</version>")}

            if (SinceBuild != null)
                filter { line -> line.replaceAll(/since-build=\"[^\"]+\"/, "since-build=\"$SinceBuild\"")}
            if (UntilBuild != null)
                filter { line -> line.replaceAll(/until-build=\"[^\"]+\"/, "until-build=\"$UntilBuild\"")}
        }

        pluginXml.delete()
        tempXml.renameTo(pluginXml)
    }
}

buildPlugin {
    dependsOn prepareForBuild
}

def dllFiles = [
    "../resharper/build/resharper-unity.rider/bin/$BuildConfiguration/net452/JetBrains.ReSharper.Plugins.Unity.dll",
    "../resharper/build/resharper-unity.rider/bin/$BuildConfiguration/net452/JetBrains.ReSharper.Plugins.Unity.pdb",
]

def annotationsFrom = '../resharper/src/resharper-unity/annotations'
def annotationsTo = 'Extensions/JetBrains.Unity/annotations'

prepareSandbox {
    dependsOn prepareForBuild

    doLast {
        assert file(unityeditorplugin_path).exists()
        assert file(unity_full_editorplugin_path).exists()

        dllFiles.forEach({ f ->
            def file = file("$f")
            if (!file.exists()) throw new RuntimeException("File $file does not exist")
        })
    }

    from(unityeditorplugin_path, {
        into "$intellij.pluginName/EditorPlugin"
    })

    from(unity_full_editorplugin_path, {
        into "$intellij.pluginName/EditorPlugin"
    })

    dllFiles.forEach({ f ->
        def file = file("$f")
        logger.warn("prepareSandbox: " +
            file.toString() + " -> " +
            "$destinationDir/$intellij.pluginName/dotnet")
        from(file, { into "$intellij.pluginName/dotnet" })
    })

    from(annotationsFrom, { into "$intellij.pluginName/dotnet/$annotationsTo" })
    into("$intellij.pluginName/projectTemplates") {
        from 'projectTemplates'
    }
}

test {
    useTestNG() {}
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
}
