Language: PsiLanguageType:SHADERLAB
IShaderLabFile
  IPpErrorDirective
    ShaderLabTokenType+PpErrorTokenElement(type:PP_ERROR, text:#error)
    ShaderLabTokenType+GenericTokenElement(type:PP_MESSAGE, text: This is an error!)
  NewLine(type:NEW_LINE, text:\n) spaces: "\n"
  NewLine(type:NEW_LINE, text:\n) spaces: "\n"
  IPpWarningDirective
    ShaderLabTokenType+PpWarningTokenElement(type:PP_WARNING, text:#warning)
    ShaderLabTokenType+GenericTokenElement(type:PP_MESSAGE, text: This is a warning!)
  NewLine(type:NEW_LINE, text:\n) spaces: "\n"
  NewLine(type:NEW_LINE, text:\n) spaces: "\n"
  IPpLineDirective
    ShaderLabTokenType+PpLineTokenElement(type:PP_LINE, text:#line)
    Whitespace(type:WHITESPACE, text: ) spaces: " "
    ShaderLabTokenType+GenericTokenElement(type:PP_DIGITS, text:23)
  NewLine(type:NEW_LINE, text:\n) spaces: "\n"
  IShaderCommand
    ShaderLabTokenType+KeywordTokenElement(type:SHADER_KEYWORD, text:Shader)
    Whitespace(type:WHITESPACE, text: ) spaces: " "
    IShaderValue
      ShaderLabTokenType+GenericTokenElement(type:STRING_LITERAL, text:"Unlit/SingleColor")
      NewLine(type:NEW_LINE, text:\n) spaces: "\n"
      ShaderLabTokenType+FixedTokenElement(type:LBRACE, text:{)
      NewLine(type:NEW_LINE, text:\n) spaces: "\n"
      Whitespace(type:WHITESPACE, text:    ) spaces: "    "
      IPpErrorDirective
        ShaderLabTokenType+PpErrorTokenElement(type:PP_ERROR, text:#error)
        ShaderLabTokenType+GenericTokenElement(type:PP_MESSAGE, text: Another error!)
      NewLine(type:NEW_LINE, text:\n) spaces: "\n"
      Whitespace(type:WHITESPACE, text:    ) spaces: "    "
      IPpWarningDirective
        ShaderLabTokenType+PpWarningTokenElement(type:PP_WARNING, text:#warning)
        ShaderLabTokenType+GenericTokenElement(type:PP_MESSAGE, text: And another warning!)
      NewLine(type:NEW_LINE, text:\n) spaces: "\n"
      Whitespace(type:WHITESPACE, text:    ) spaces: "    "
      IPpLineDirective
        ShaderLabTokenType+PpLineTokenElement(type:PP_LINE, text:#line)
        Whitespace(type:WHITESPACE, text: ) spaces: " "
        ShaderLabTokenType+GenericTokenElement(type:PP_DIGITS, text:34 23 23 32)
        Whitespace(type:WHITESPACE, text: ) spaces: " "
      NewLine(type:NEW_LINE, text:\n) spaces: "\n"
      Whitespace(type:WHITESPACE, text:    ) spaces: "    "
      IPropertiesCommand
        ShaderLabTokenType+KeywordTokenElement(type:PROPERTIES_KEYWORD, text:Properties)
        NewLine(type:NEW_LINE, text:\n) spaces: "\n"
        Whitespace(type:WHITESPACE, text:    ) spaces: "    "
        IPropertiesValue
          ShaderLabTokenType+FixedTokenElement(type:LBRACE, text:{)
          NewLine(type:NEW_LINE, text:\n) spaces: "\n"
          Whitespace(type:WHITESPACE, text:        ) spaces: "        "
          EndOfLineComment(type:END_OF_LINE_COMMENT, text:// Color property for material inspector, default to white) spaces: "// Color property for material inspector, default to white"
          NewLine(type:NEW_LINE, text:\n) spaces: "\n"
          Whitespace(type:WHITESPACE, text:        ) spaces: "        "
          IPropertyDeclaration
            IShaderLabIdentifier
              Identifier(type:IDENTIFIER, text:#ValidName)
            Whitespace(type:WHITESPACE, text: ) spaces: " "
            ShaderLabTokenType+FixedTokenElement(type:LPAREN, text:()
            ShaderLabTokenType+GenericTokenElement(type:STRING_LITERAL, text:"Another Color")
            ShaderLabTokenType+FixedTokenElement(type:COMMA, text:,)
            Whitespace(type:WHITESPACE, text: ) spaces: " "
            ISimplePropertyType
              ShaderLabTokenType+KeywordTokenElement(type:COLOR_KEYWORD, text:Color)
            ShaderLabTokenType+FixedTokenElement(type:RPAREN, text:))
            Whitespace(type:WHITESPACE, text: ) spaces: " "
            ShaderLabTokenType+FixedTokenElement(type:EQUALS, text:=)
            Whitespace(type:WHITESPACE, text: ) spaces: " "
            IVectorPropertyValue
              IVectorLiteral
                ShaderLabTokenType+FixedTokenElement(type:LPAREN, text:()
                INumericValue
                  ShaderLabTokenType+GenericTokenElement(type:NUMERIC_LITERAL, text:1)
                ShaderLabTokenType+FixedTokenElement(type:COMMA, text:,)
                INumericValue
                  ShaderLabTokenType+GenericTokenElement(type:NUMERIC_LITERAL, text:1)
                ShaderLabTokenType+FixedTokenElement(type:COMMA, text:,)
                INumericValue
                  ShaderLabTokenType+GenericTokenElement(type:NUMERIC_LITERAL, text:1)
                ShaderLabTokenType+FixedTokenElement(type:COMMA, text:,)
                INumericValue
                  ShaderLabTokenType+GenericTokenElement(type:NUMERIC_LITERAL, text:1)
                ShaderLabTokenType+FixedTokenElement(type:RPAREN, text:))
          NewLine(type:NEW_LINE, text:\n) spaces: "\n"
          Whitespace(type:WHITESPACE, text:        ) spaces: "        "
          IPpWarningDirective
            ShaderLabTokenType+PpWarningTokenElement(type:PP_WARNING, text:#warning)
            ShaderLabTokenType+GenericTokenElement(type:PP_MESSAGE, text: This is not a valid name!)
          NewLine(type:NEW_LINE, text:\n) spaces: "\n"
          Whitespace(type:WHITESPACE, text:    ) spaces: "    "
          ShaderLabTokenType+FixedTokenElement(type:RBRACE, text:})
      NewLine(type:NEW_LINE, text:\n) spaces: "\n"
      Whitespace(type:WHITESPACE, text:    ) spaces: "    "
      IShaderBlock
        ISubShaderCommand
          ShaderLabTokenType+KeywordTokenElement(type:SUB_SHADER_KEYWORD, text:SubShader)
          NewLine(type:NEW_LINE, text:\n) spaces: "\n"
          Whitespace(type:WHITESPACE, text:    ) spaces: "    "
          ISubShaderValue
            ShaderLabTokenType+FixedTokenElement(type:LBRACE, text:{)
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            Whitespace(type:WHITESPACE, text:        ) spaces: "        "
            EndOfLineComment(type:END_OF_LINE_COMMENT, text:// Unity's lexer doesn't require a new line, but it does eat the last character) spaces: "// Unity's lexer doesn't require a new line, but it does eat the last character"
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            Whitespace(type:WHITESPACE, text:        ) spaces: "        "
            IPpLineDirective
              ShaderLabTokenType+PpLineTokenElement(type:PP_LINE, text:#line)
              Whitespace(type:WHITESPACE, text: ) spaces: " "
              ShaderLabTokenType+GenericTokenElement(type:PP_DIGITS, text:23)
              Whitespace(type:WHITESPACE, text: ) spaces: " "
              ShaderLabTokenType+GenericTokenElement(type:PP_SWALLOWED, text:P)
            IPass
              ITexturePassDef
                ShaderLabTokenType+KeywordTokenElement(type:PASS_KEYWORD, text:Pass)
                NewLine(type:NEW_LINE, text:\n) spaces: "\n"
                Whitespace(type:WHITESPACE, text:        ) spaces: "        "
                ITexturePassValue
                  ShaderLabTokenType+FixedTokenElement(type:LBRACE, text:{)
                  NewLine(type:NEW_LINE, text:\n) spaces: "\n"
                  Whitespace(type:WHITESPACE, text:            ) spaces: "            "
                  ICgProgramBlock
                    ShaderLabTokenType+CgProgramTokenElement(type:CG_PROGRAM, text:CGPROGRAM)
                    ICgContent
                      ShaderLabTokenType+GenericTokenElement(type:CG_CONTENT, text:\n            #pragma vertex vert\n            #pragma fragment frag\n            \n            // vertex shader\n            // this time instead of using "appdata" struct, just spell inputs manually,\n            // and instead of returning v2f struct, also just return a single output\n            // float4 clip position\n            float4 vert (float4 vertex : POSITION) : SV_POSITION\n            {\n                return mul(UNITY_MATRIX_MVP, vertex);\n            }\n            \n            // color from the material\n            fixed4 _Color;\n\n            // pixel shader, no inputs needed\n            fixed4 frag () : SV_Target\n            {\n                return _Color; // just return it\n            }\n            )
                    ShaderLabTokenType+CgEndTokenElement(type:CG_END, text:ENDCG)
                  NewLine(type:NEW_LINE, text:\n) spaces: "\n"
                  Whitespace(type:WHITESPACE, text:        ) spaces: "        "
                  ShaderLabTokenType+FixedTokenElement(type:RBRACE, text:})
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            Whitespace(type:WHITESPACE, text:    ) spaces: "    "
            EndOfLineComment(type:END_OF_LINE_COMMENT, text:// Errors!) spaces: "// Errors!"
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            Whitespace(type:WHITESPACE, text:    ) spaces: "    "
            IPpErrorDirective
              ShaderLabTokenType+PpErrorTokenElement(type:PP_ERROR, text:#error)
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            Whitespace(type:WHITESPACE, text:    ) spaces: "    "
            IPpWarningDirective
              ShaderLabTokenType+PpWarningTokenElement(type:PP_WARNING, text:#warning)
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            Whitespace(type:WHITESPACE, text:    ) spaces: "    "
            EndOfLineComment(type:END_OF_LINE_COMMENT, text:// Valid, means 0) spaces: "// Valid, means 0"
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            Whitespace(type:WHITESPACE, text:    ) spaces: "    "
            IPpLineDirective
              ShaderLabTokenType+PpLineTokenElement(type:PP_LINE, text:#line)
            NewLine(type:NEW_LINE, text:\n) spaces: "\n"
            Whitespace(type:WHITESPACE, text:    ) spaces: "    "
            ShaderLabTokenType+FixedTokenElement(type:RBRACE, text:})
      NewLine(type:NEW_LINE, text:\n) spaces: "\n"
      ShaderLabTokenType+FixedTokenElement(type:RBRACE, text:})
  NewLine(type:NEW_LINE, text:\n) spaces: "\n"

