// ReSharper disable Unity.RedundantEventFunction
using UnityEditor;
using UnityEngine;

public class ||HighlightExactMatchOnly|(0)|(1) : MonoBehaviour
{
    public void ||Start|(2)|(3)()
    {
    }

    public void Start(int i)
    {
    }
}

public class ||HighlightMultipleExactMatches|(4)|(5) : MonoBehaviour
{
    // Both overloads are correct - collisionInfo is optional.
    // Which is picked is ambiguous, so mark both with a warning
    public void ||OnCollisionStay|(6)|(7)(Collision collisionInfo)
    {
    }

    public void ||OnCollisionStay|(8)|(9)()
    {
    }
}

// Incorrect signatures should still be marked as event functions,
// as long as there isn't an exact match
public class ||HighlightIncorrectOverloads|(10)|(11) : MonoBehaviour
{
    public void ||Start|(12)|(13)(int i)
    {
    }

    public int ||Update|(14)|(15)()
    {
        return 0;
    }

    public void ||OnCollisionStay|(16)|(17)(Collision collisionInfo, int i)
    {
    }

    // Missing all parameters
    public void ||OnAnimatorIK|(18)|(19)()
    {
    }
}

public class ||StaticModifier|(20)|(21) : AssetPostprocessor
{
    // Should be static
    public void ||OnGeneratedCSProjectFiles|(22)|(23)()
    {
    }

    bool ||OnPreGeneratingCSProjectFiles|(24)|(25)()
    {
    }

    // Should not be static
    static void ||OnPreprocessAssembly|(26)|(27)(string pathName)
    {
    }
}

public class ||MyStateMachineBehaviour|(28)|(29) : StateMachineBehaviour
{
    // Do not show incorrect signature warning - the correct signature is implemented in the base class
    public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
    {
        base.OnStateEnter(animator, stateInfo, layerIndex, controller);
    }
}

public class ||TypeParameters|(30)|(31) : MonoBehaviour
{
    public void ||Start|(32)|(33)<T1, T2>()
    {
    }
}

public class ||AllWrong|(34)|(35) : AssetPostprocessor
{
    public int ||OnGeneratedCSProjectFiles|(36)|(37)<T1, T2>(int value)
    {
        return 42;
    }
}

---------------------------------------------------------
(0): Unity Gutter Icon: Unity scripting component
(1): ReSharper Unity Implicitly Used Identifier: 
(2): Unity Gutter Icon: Unity event function

Start is called on the frame when a script is enabled just before any of the Update methods are called the first time.
This function can be a coroutine.
(3): ReSharper Unity Implicitly Used Identifier: 
(4): Unity Gutter Icon: Unity scripting component
(5): ReSharper Unity Implicitly Used Identifier: 
(6): Unity Gutter Icon: Unity event function

OnCollisionStay is called once per frame for every collider/rigidbody that is touching rigidbody/collider.
This function can be a coroutine.
(7): ReSharper Unity Implicitly Used Identifier: 
(8): Unity Gutter Icon: Unity event function

OnCollisionStay is called once per frame for every collider/rigidbody that is touching rigidbody/collider.
This function can be a coroutine.
(9): ReSharper Unity Implicitly Used Identifier: 
(10): Unity Gutter Icon: Unity scripting component
(11): ReSharper Unity Implicitly Used Identifier: 
(12): Unity Gutter Icon: Unity event function

Start is called on the frame when a script is enabled just before any of the Update methods are called the first time.
This function can be a coroutine.
(13): ReSharper Unity Implicitly Used Identifier: 
(14): Unity Gutter Icon: Unity event function

Update is called every frame, if the MonoBehaviour is enabled.
(15): ReSharper Unity Implicitly Used Identifier: 
(16): Unity Gutter Icon: Unity event function

OnCollisionStay is called once per frame for every collider/rigidbody that is touching rigidbody/collider.
This function can be a coroutine.
(17): ReSharper Unity Implicitly Used Identifier: 
(18): Unity Gutter Icon: Unity event function

Callback for setting up animation IK (inverse kinematics).
(19): ReSharper Unity Implicitly Used Identifier: 
(20): Unity Gutter Icon: Unity scripting component
(21): ReSharper Unity Implicitly Used Identifier: 
(22): Unity Gutter Icon: Unity event function

This is undocumented, and a 'safeguard' for when Visual Studio gets a new release that is incompatible with Unity, so that users can postprocess our csproj files to fix the issue (or just completely replace them). Hopefully we'll never need this.
(23): ReSharper Unity Implicitly Used Identifier: 
(24): Unity Gutter Icon: Unity event function

This callback is used by UnityVS to take over project generation from Unity
(25): ReSharper Unity Implicitly Used Identifier: 
(26): Unity Gutter Icon: Unity event function
(27): ReSharper Unity Implicitly Used Identifier: 
(28): Unity Gutter Icon: Unity scripting component
(29): ReSharper Unity Implicitly Used Identifier: 
(30): Unity Gutter Icon: Unity scripting component
(31): ReSharper Unity Implicitly Used Identifier: 
(32): Unity Gutter Icon: Unity event function

Start is called on the frame when a script is enabled just before any of the Update methods are called the first time.
This function can be a coroutine.
(33): ReSharper Unity Implicitly Used Identifier: 
(34): Unity Gutter Icon: Unity scripting component
(35): ReSharper Unity Implicitly Used Identifier: 
(36): Unity Gutter Icon: Unity event function

This is undocumented, and a 'safeguard' for when Visual Studio gets a new release that is incompatible with Unity, so that users can postprocess our csproj files to fix the issue (or just completely replace them). Hopefully we'll never need this.
(37): ReSharper Unity Implicitly Used Identifier: 
