<?xml version="1.0" encoding="utf-8"?>
<Errors language="C#" configurableSeverityImplementationLanguage="CSHARP"
        baseClass="CSharpUnityHighlightingBase">
  
  <Usings>
    JetBrains.ReSharper.Psi.CSharp;
    JetBrains.ReSharper.Psi.CSharp.Tree;
    JetBrains.ReSharper.Plugins.Unity.CSharp.Daemon.Errors;
    JetBrains.ReSharper.Plugins.Unity.CSharp.Daemon.Stages.Highlightings;
    JetBrains.ReSharper.Plugins.Unity.CSharp.Psi.Resolve;
  </Usings>
  
  <!-- Register the static severity groups. This is mostly used in grouping items in SWEA results.
       The groups should be different to any configurable severity groups -->
  <StaticSeverityGroups>
    <Group name="Unity Errors" key="UnityErrors" />
    <Group name="Unity Warnings" key="UnityWarnings" />
    <Group name="Unity Gutter Marks" key="UnityGutterMarks" />
  </StaticSeverityGroups>
  
  <!-- Register the configurable severities
       Can take a child Tag or Group element
       * Tag is configurable severity without a group
       * Group[@name] specifies the name of the group, expects child Tag elements.
         Note that the group name/title should be registered with 
         [assembly: RegisterConfigurableHighlightingsGroup(name, "Title")]
       * Tag[@name] is the HIGHLIGHTING_ID of a warning/error. It is treated as a string
         literal and quoted. It is referenced in Warning[@configurableSeverity]
       * Tag[@default] is the default severity. Just the enum value, no leading "Severity."
       * Tag[@type] is optional. Default is "simple". Other options include "global",
         "localAndGlobal"
       * Tag[@externalName] is also the HIGHLIGHTING_ID, but is treated verbatim, rather
         than as a string literal. This allows for using the fully qualified name of the
         HIGHLIGHTING_ID
       * Tag[@alternatives] the value of RegisterConfigurableSeverityAttribute.AlternativeIDs
       * Tag/Title is the short title of the severity, usually matching the highlight's MESSAGE
       * Tag/Description is a longer description, shown in the options pages
       * Tag/CompoundItemName only used if Tag[@type] is missing or "simple". Sets the compound
         item name
       -->
  <SeverityConfiguration>
    <Group name="UnityHighlightingGroupIds.Unity">
      <Tag externalName="DuplicateEventFunctionWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Event function with the same name is already declared</Title>
        <Description>Event function with the same name is already declared.</Description>
      </Tag>
      
      <Tag externalName="ExplicitTagStringComparisonWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Use 'CompareTag' instead of explicit string comparison</Title>
        <Description>Explicit string comparison with 'GameObject.tag' or 'Component.tag' is inefficient. Use the 'CompareTag' method instead.</Description>
      </Tag>

      <Tag externalName="ExpectedComponentWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>Expected type deriving from 'Component' or 'MonoBehaviour'</Title>
        <Description>Expected built in type deriving from 'Component', or user type deriving from 'MonoBehaviour'.</Description>
      </Tag>

      <Tag externalName="ExpectedScriptableObjectWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>Expected type deriving from 'ScriptableObject'</Title>
        <Description>Expected type deriving from 'ScriptableObject'.</Description>
      </Tag>

      <Tag externalName="InefficientPropertyAccessWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Repeatable property access of a built-in component is inefficient</Title>
        <Description>Built-in component property access results in native method calls and should be cached.</Description>
      </Tag>

      <Tag externalName="IncorrectMonoBehaviourInstantiationWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>MonoBehaviours must be instantiated with 'GameObject.AddComponent&lt;T&gt;()' instead of 'new'</Title>
        <Description>Instantiating a MonoBehaviour based class with 'new' does not attach it to a GameObject, and Unity will not invoke any event functions. Create a new instance using 'GameObject.AddComponent&lt;T&gt;().</Description>
      </Tag>
      
      <Tag externalName="IncorrectScriptableObjectInstantiationWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>ScriptableObjects must be instantiated with 'ScriptableObject.CreateInstance&lt;T&gt;()' instead of 'new'</Title>
        <Description>Instantiating a ScriptableObject base class with 'new' means that Unity will not call any event functions. Use 'ScriptableObject.CreateInstance&lt;T&gt;()' instead.</Description>
      </Tag>
      
      <Tag externalName="IncorrectSignatureWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>Incorrect method signature</Title>
        <Description>Method does not match expected signature.</Description>
      </Tag>
 
      <Tag externalName="InstantiateWithoutParentWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Inefficient setting of the parent property</Title>
        <Description>Using overload without transform parameter results in creating transform hierarchy, which is replaced later in code.</Description>
      </Tag>

      <Tag externalName="ParameterNotDerivedFromComponentWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Parameter should be derived from `Component`</Title>
        <Description>Parameter should be derived from `Component`.</Description>
      </Tag>

      <Tag externalName="PossibleMisapplicationOfAttributeToMultipleFieldsWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>Possible mis-application of attribute to multiple fields</Title>
        <Description>Applying an attribute to a single declaration containing multiple fields will apply the attribute to each field. The highlighted attribute (e.g. 'FormerlySerializedAs') is intended to be applied only to a single field. Prefer an explicit application to a single field in a single declaration.</Description>
      </Tag>

      <Tag externalName="PreferAddressByIdToGraphicsParamsWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Use int overload to access properties instead of string</Title>
        <Description>Using the string to address graphics properties results in additional overhead that should not be incurred.</Description>
      </Tag>

      <Tag externalName="PreferGenericMethodOverloadWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Use generic method overload instead of a string one</Title>
        <Description>Using the string for the component type variants results in additional overhead that should not be incurred.</Description>
      </Tag>

      <Tag externalName="PreferNonAllocApiWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Use 'NonAlloc' api instead of methods which allocate memory</Title>
        <Description>Reusing your buffer instead of new allocation will increase performance.</Description>
      </Tag>

      <Tag externalName="RedundantAttributeOnTargetWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Attribute is redundant when applied to this declaration type</Title>
        <Description>The attribute does not define any restrictions on valid targets, but is only useful when applied to specific declarations, e.g. field, class or method.</Description>
        <CompoundItemName>Redundant attribute usage</CompoundItemName>
      </Tag>

      <Tag externalName="RedundantEventFunctionWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Redundant Unity event function</Title>
        <Description>Empty Unity event functions are still called from native code, which affects performance.</Description>
      </Tag>

      <Tag externalName="RedundantFormerlySerializedAsAttributeWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Redundant 'FormerlySerializedAs' attribute</Title>
        <Description>The 'FormerlySerializedAs' attribute is only valid on Unity serialized field. It is also redundant if the name argument matches the current name of the field.</Description>
      </Tag>

      <Tag externalName="RedundantHideInInspectorAttributeWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Redundant 'HideInInspector' attribute</Title>
        <Description>The 'HideInInspector' attribute only applies to serialised fields.</Description>
        <CompoundItemName>Redundant attribute usage</CompoundItemName>
      </Tag>

      <Tag externalName="RedundantInitializeOnLoadAttributeWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Redundant 'InitializeOnLoad' attribute</Title>
        <Description>The 'InitializeOnLoad' attribute is redundant when static constructor is missing.</Description>
        <CompoundItemName>Redundant attribute usage</CompoundItemName>
      </Tag>

      <Tag externalName="RedundantSerializeFieldAttributeWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Redundant 'SerializeField' attribute</Title>
        <Description>Unity will ignore the 'SerializeField' attribute if a field is also marked with the 'NonSerialized' attribute.</Description>
        <CompoundItemName>Redundant attribute usage</CompoundItemName>
      </Tag>

      <Tag externalName="StringBasedMethodInvocationProblemWarning.HIGHLIGHTING_ID"
           default="HINT">
        <Title>String-based method invocation is inefficient</Title>
        <Description>Invocation for this method results in additional overhead. Use UnityEvent, C# event, delegates or a direct method call.</Description>
      </Tag>

      <Tag externalName="StringLiteralReferenceIncorrectSignatureWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Method referenced in string literal does not have the expected signature</Title>
        <Description>Method referenced in string literal does not have the expected signature.</Description>
      </Tag>

      <Tag externalName="UnityObjectNullCoalescingWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>'??' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object</Title>
        <Description>
          The null coalescing operator does not call the custom equality operators defined on 'UnityEngine.Object',
          which will check to see if the underlying Unity engine object has been destroyed. Prefer an explicit null
          comparison or implicit bool comparison if the lifetime check is intended, or explicitly use 'object.ReferenceEquals()'
          for a standard (and quicker) CLR null check.
        </Description>
        <CompoundItemName>Possible unintended bypass of lifetime check of underlying Unity engine object</CompoundItemName>
      </Tag>
      
      <Tag externalName="UnityObjectNullPropagationWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>'?.' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object</Title>
        <Description>
          The null propagating operator does not call the custom equality operators defined on 'UnityEngine.Object',
          which will check to see if the underlying Unity engine object has been destroyed. Prefer an explicit null
          comparison or implicit bool comparison if the lifetime check is intended, or explicitly use 'object.ReferenceEquals()'
          for a standard (and quicker) CLR null check.
        </Description>
        <CompoundItemName>Possible unintended bypass of lifetime check of underlying Unity engine object</CompoundItemName>
      </Tag>
    </Group>
  </SeverityConfiguration>
  
  <!-- Warning, Error, Info or LocalAndGlobal
       * @name - name of the highlighting. Suffix based on parent element is automatically added
       * @configurableSeverity - the value of HIGHLIGHTING_ID. Treated as a string literal and quoted
       * @externalConfigurableSeverity - the value of HIGHLIGHTING_ID. Treated verbatim to refer to code
       * @staticGroup - define the static group this highlight belongs to. Must have been registered
         in /Errors/StaticSeverityGroups
       * ./Parameter - multiple elements for constructor parameters. Requires the @name and @type attributes.
       * ./Parameter[@name] is capitalised and turned into a public property
       * ./Message[@value] the string format template for the message
       * ./Message/Argument multiple code snippets to be used as the arguments to string.Format
       * ./Range code snippt to be the return value of CalculateRange()
       * ./Behavour - NOTE THE SPELLING!
       * ./Behavour[@attributeID] (optional) defines ConfigurableSeverityHighlightingAttribute.AttributeId
       * ./Behavour[@overlapResolvePolicy] (optional) defines ConfigurableSeverityHighlightingAttribute.OverlapResolve
       * ./Behavour/QuickFix multiple elements listing the types that will implement a quick fix
         for this highlight. Only used when the file is processed in QUICKFIX mode (default is
         to use ERROR mode)
       -->

  <Warning name="DuplicateEventFunction" configurableSeverity="Unity.DuplicateEventFunction">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Message value="Event function with the same name is already declared" />
    <Range>CSharpErrorUtil.GetMethodNameAndParametersHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
  
  <Warning name="ExpectedComponent" configurableSeverity="Unity.ExpectedComponent">
    <Parameter type="IReference" name="reference" />
    <Parameter type="string" name="requiredBaseType" />
    <Message value="Expected type derived from '{0}'">
      <Argument>RequiredBaseType</Argument>
    </Message>
    <Range>Reference.GetDocumentRange()</Range>
  </Warning>
  
  <Warning name="ExpectedScriptableObject" configurableSeverity="Unity.ExpectedScriptableObject">
    <Parameter type="IReference" name="reference" />
    <Message value="Expected type derived from 'UnityEngine.ScriptableObject'" />
    <Range>Reference.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
  
  <Warning name="ExplicitTagStringComparison" configurableSeverity="Unity.ExplicitTagComparison">
    <Parameter type="IEqualityExpression" name="equalityExpression" />
    <Parameter type="bool" name="leftOperandIsTagReference" />
    <Message value="Explicit string comparison is inefficient, use 'CompareTag' instead" />
    <Range>EqualityExpression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="IncorrectMonoBehaviourInstantiation" configurableSeverity="Unity.IncorrectMonoBehaviourInstantiation">
    <Parameter type="IObjectCreationExpression" name="creationExpression" />
    <Message value="MonoBehaviours must be instantiated with 'GameObject.AddComponent&lt;T&gt;()' instead of 'new'" />
    <Range>CreationExpression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="IncorrectScriptableObjectInstantiation" configurableSeverity="Unity.IncorrectScriptableObjectInstantiation">
    <Parameter type="IObjectCreationExpression" name="creationExpression" />
    <Message value="ScriptableObjects must be instantiated with 'ScriptableObject.CreateInstance&lt;T&gt;()' instead of 'new'" />
    <Range>CreationExpression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="IncorrectSignature" configurableSeverity="Unity.IncorrectMethodSignature">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Parameter type="MethodSignatureMatch" name="methodSignatureMatch" isValid="skip" />
    <Message value="Incorrect method signature. Expected '{0}'">
      <Argument>ExpectedMethodSignature.FormatSignature(MethodDeclaration.DeclaredName)</Argument>
    </Message>
    <Range>MethodDeclaration.GetNameDocumentRange()</Range>
  </Warning>

  <Warning name="InefficientPropertyAccess" configurableSeverity="Unity.InefficientPropertyAccess">
    <Parameter type="IReferenceExpression" name="highlightedReference"/>
    <Parameter type="List&lt;IReferenceExpression&gt;" name="references" isValid="skip" />
    <Parameter type="ICSharpTreeNode" name="cacheAnchor" />
    <Parameter type="bool" name = "inlineCacheValue" />
    <Parameter type="ICSharpTreeNode" name="restoreAnchor" />
    <Parameter type="bool" name="inlineRestoreValue" />
    <Message value="Built-in component property access results in native method calls and should be cached"/>
    <Range>HighlightedReference.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="NONE" />
  </Warning>

  <Warning name="InstantiateWithoutParent" configurableSeverity="Unity.InstantiateWithoutParent">
    <Parameter type="IReferenceExpression" name="reference" />
    <Parameter type="IInvocationExpression" name="invocation"/>
    <Parameter type="ICSharpExpression" name="newArgument" isValid="skip"/>
    <Parameter type="bool" name="stayInWorldCoords" isValid="skip"/>
    <Message value="Using overload without transform parameter results in creating transform hierarchy, which is replaced later in code."/>
    <Range>Reference.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="NONE" />
  </Warning>

  <Warning name="InvalidParameters" configurableSeverity="Unity.IncorrectMethodSignature">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Message value="Incorrect method parameters. Expected '({0})'">
      <Argument>ExpectedMethodSignature.Parameters.GetParameterList()</Argument>
    </Message>
    <Range>CSharpErrorUtil.GetParametersHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="InvalidReturnType" configurableSeverity="Unity.IncorrectMethodSignature">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Message value="Incorrect return type. Expected '{0}'">
      <Argument>ExpectedMethodSignature.GetReturnTypeName()</Argument>
    </Message>
    <Range>CSharpErrorUtil.GetReturnTypeHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="InvalidStaticModifier" configurableSeverity="Unity.IncorrectMethodSignature">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Message value="{0}">
      <Argument>MethodDeclaration.IsStatic ? "Incorrect static modifier" : "Missing static modifier"</Argument>
    </Message>
    <Range>CSharpErrorUtil.GetStaticModifierOrMethodNameHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="InvalidTypeParameters" configurableSeverity="Unity.IncorrectMethodSignature">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Parameter type="MethodSignature" name="expectedMethodSignature" isValid="skip" />
    <Message value="Incorrect type parameters" />
    <Range>CSharpErrorUtil.GetTypeParametersOrMethodNameHighlightingRange(MethodDeclaration)</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="ParameterNotDerivedFromComponent" configurableSeverity="Unity.ParameterNotDerivedFromComponent">
    <Parameter type="ICSharpParameterDeclaration" name="parameterDeclaration" />
    <Message value="Parameter '{0}' should be derived from 'Component'">
      <Argument>ParameterDeclaration.DeclaredName</Argument>
    </Message>
    <Range>ParameterDeclaration.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="PreferAddressByIdToGraphicsParams" configurableSeverity="Unity.PreferAddressByIdToGraphicsParams">
    <Parameter type="IInvocationExpression" name="invocationMethod" />
    <Parameter type="ICSharpArgument" name="argument" />
    <Parameter type="IExpression" name="argumentExpression" />
    <Parameter type="string" name="literal" />
    <Parameter type="string" name="typeName" />
    <Parameter type="string" name="mapFunction" />
    <Message value="Int method overload is preferred. Using the string parameter results in additional overhead."/>
    <Range>Argument.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE" />
  </Warning>
  
  <Warning name="PreferGenericMethodOverload" configurableSeverity="Unity.PreferGenericMethodOverload">
    <Parameter type="IInvocationExpression" name="invocationMethod" />
    <Parameter type="string" name="methodName" isValid="skip"/>
    <Parameter type="ILiteralExpression" name="argument" />
    <Parameter type="ITypeElement" name="typeElement" isValid="skip"/>
    <Message value="Generic method overload is preferred. Using the string parameter results in additional overhead."/>
    <Range>Argument.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE" />
  </Warning>

  <Warning name="PreferNonAllocApi" configurableSeverity="Unity.PreferNonAllocApi">
    <Parameter type="IInvocationExpression" name="invocationExpression" />
    <Parameter type="IReferenceExpression" name="invokedExpression" />
    <Parameter type="IMethod" name="nonAllocMethod" />
    <Message value="Allocating method will decrease performance. Use '{0}' and reuse buffer for return value">
      <Argument>NonAllocMethod.ShortName</Argument>
    </Message>
    <Range>InvokedExpression.Reference.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>

  <Warning name="PossibleMisapplicationOfAttributeToMultipleFields" configurableSeverity="Unity.PossibleMisapplicationOfAttributeToMultipleFields">
    <Parameter type="IAttribute" name="attribute" />
    <Message value="Possible mis-application of 'FormerlySerializedAs' attribute to multiple fields" />
    <Range>Attribute.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
  
  <Warning name="RedundantAttributeOnTarget" configurableSeverity="Unity.RedundantAttributeOnTarget">
    <Parameter type="IAttribute" name="attribute" />
    <Parameter type="ITypeElement" name="attributeType"/>
    <Parameter type="System.AttributeTargets" name="validTargets" isValid="skip" />
    <Message value="Attribute '{0}' is redundant on this declaration type. It is only used when applied to '{1}' declarations">
      <Argument>DeclaredElementPresenter.Format(CSharpLanguage.Instance, DeclaredElementPresenter.QUALIFIED_NAME_PRESENTER, AttributeType)</Argument>
      <Argument>ValidTargets</Argument>
    </Message>
    <Message value="Redundant attribute when applied here. Valid targets: {0}">
      <Argument>ValidTargets</Argument>
    </Message>
    <Range>Attribute.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="DEADCODE" attributeID="DEADCODE" />
  </Warning>

  <Warning name="RedundantEventFunction" configurableSeverity="Unity.RedundantEventFunction">
    <Parameter type="IMethodDeclaration" name="methodDeclaration" />
    <Message value="Redundant Unity event function" />
    <Range>MethodDeclaration.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="DEADCODE" attributeID="DEADCODE" />
  </Warning>

  <Warning name="RedundantFormerlySerializedAsAttribute" configurableSeverity="Unity.RedundantFormerlySerializedAsAttribute">
    <Parameter type="IAttribute" name="attribute" />
    <Message value="Redundant 'FormerlySerializedAs' attribute" />
    <Range>Attribute.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="DEADCODE" attributeID="DEADCODE" />
  </Warning>

  <Warning name="RedundantHideInInspectorAttribute" configurableSeverity="Unity.RedundantHideInInspectorAttribute">
    <Parameter type="IAttribute" name="attribute" />
    <Message value="Redundant 'HideInInspector' attribute" />
    <Range>Attribute.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE" />
  </Warning>

  <Warning name="RedundantInitializeOnLoadAttribute" configurableSeverity="Unity.RedundantInitializeOnLoadAttribute">
    <Parameter type="IAttribute" name="attribute" />
    <Message value="'InitializeOnLoad' attribute is redundant when static constructor is missing" />
    <Range>Attribute.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="DEADCODE" attributeID="DEADCODE" />
  </Warning>

  <Warning name="RedundantSerializeFieldAttribute" configurableSeverity="Unity.RedundantSerializeFieldAttribute">
    <Parameter type="IAttribute" name="attribute" />
    <Message value="Redundant 'SerializeField' attribute" />
    <Range>Attribute.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE" />
  </Warning>

  <Warning name="StringBasedMethodInvocationProblem" configurableSeverity="Unity.StringBasedMethodInvocationProblem">
    <Parameter type="IReference" name="invocation" />
    <Message value="Invocation for this method results in additional overhead. Use UnityEvent, C# event, delegates or a direct method call."/>
    <Range>Invocation.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="NONE" />
  </Warning>

  <Error name="StringLiteralReferenceIncorrectSignature" staticGroup="UnityErrors">
    <Parameter type="SyncVarHookReference" name="reference" />
    <Message value="Expected a method with '{0}' signature">
      <Argument>Reference.MethodSignature.FormatSignature(Reference.GetName())</Argument>
    </Message>
    <Range>Reference.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Error>

  <Warning name="StringLiteralReferenceIncorrectSignature"
           configurableSeverity="Unity.IncorrectMethodSignatureInStringLiteral">
    <Parameter type="UnityEventFunctionReference" name="reference" isValid="skip" />
    <Message value="Expected a method with '{0}' signature">
      <Argument>Reference.MethodSignature.FormatSignature(Reference.GetName())</Argument>
    </Message>
    <Range>Reference.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
  
  <Error name="SyncVarUsage" staticGroup="UnityErrors">
    <Parameter type="IAttribute" name="attribute" />
    <Message value="'SyncVar' attribute can only be applied in a class that derives from 'NetworkBehaviour'" />
    <Range>Attribute.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="ERROR" />
  </Error>

  <Info name="UnityGutterMark" staticGroup="UnityGutterMarks">
    <Parameter type="IDeclaration" name="declaration" />
    <Parameter type="string" name="text" />
    <Message value="{0}">
      <Argument>Text</Argument>
    </Message>
    <Range>Declaration.GetNameDocumentRange()</Range>
  </Info>
  
  <Warning name="UnityObjectNullCoalescing" configurableSeverity="Unity.NoNullCoalescing">
    <Parameter type="INullCoalescingExpression" name="expression" />
    <Message value="'??' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object" />
    <Range>Expression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
  
  <Warning name="UnityObjectNullPropagation" configurableSeverity="Unity.NoNullPropogation">
    <Parameter type="IConditionalAccessExpression" name="expression" />
    <Message value="'?.' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object" />
    <Range>Expression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="WARNING" />
  </Warning>
</Errors>