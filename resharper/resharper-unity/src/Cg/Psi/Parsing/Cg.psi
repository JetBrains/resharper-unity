options
{
// Parser options
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// Parser class name and namespace
  parserPackage="JetBrains.ReSharper.Plugins.Unity.Cg.Psi.Gen";
  parserClassName="CgParserGenerated";
// Strongly type the lexer we're using. ILexer<int> is the caching lexer instance
  "lexerClassName"="JetBrains.ReSharper.Psi.Parsing.ILexer<int>";
// FQN of (non-generated) class that provides messages for the parser
  parserMessagesClass="JetBrains.ReSharper.Plugins.Unity.Cg.Psi.Parsing.ParserMessages";
// Parser, error messages + token bitsets target folder
  parserTargetSubdir="Parsing/Cg";
// Don't generate a bitset unless there's 4 or more comparisons to be made
  tokenBitsetThreshold=4;
// Composite node type/element generation options
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// Existing language specific ITreeNode
  "psiElementClassFQName"="JetBrains.ReSharper.Plugins.Unity.Cg.Psi.Tree.ICgTreeNode";
// Existing token type containing class + namespace
  tokenTypePackageName="JetBrains.ReSharper.Plugins.Unity.Cg.Psi.Parsing.TokenNodeTypes";
  tokenTypeClassName="CgTokenNodeTypes";
// Set base index for generated (element, not token) node types. Defaults to 2000, tokens default to 1000
// tokenTypeBaseIndex=2000;
// Tree node interface namespace + target folder (also target folder for navigators + visitors)
  psiInterfacePackageName="JetBrains.ReSharper.Plugins.Unity.Cg.Psi.Tree";
  psiInterfacesTargetSubdir="Psi/Cg/Tree";
// Tree node implementation namespace, base type and target folder
  psiStubsPackageName="JetBrains.ReSharper.Plugins.Unity.Cg.Psi.Tree.Impl";
  psiStubsBaseClass="CgCompositeElement";
  psiStubsTargetSubdir="Psi/Cg/Tree/Impl";
// Existing composite node type base class
  elementTypeBaseClass="CgCompositeNodeType";
// Namespace for generating custom interface when `customInterface` option used
  customInterfacePackage="JetBrains.ReSharper.Plugins.Unity.Cg.Psi.Tree";
// Any role used in this file that begins with this prefix must be defined in `ChildRole`
  publicChildRolePrefix="CG_";
// Namespace and suffix for custom element instance implementation created by
// node type when `customImpl` option is specfied.
// Default suffix is `Impl`
  customImplPackage="JetBrains.ReSharper.Plugins.Unity.Cg.Psi.Tree.Impl";
  "customImplSuffix"="";
// Required on. Changes behaviour of various things, e.g. public child role values based on prefix
  disableReflection;
// Required. If missing, generates Add/Remove methods for each collection
  generateWorkingPsi;
}

abstract errorElement
options {
  interfaceName = "JetBrains.ReSharper.Psi.Tree.IErrorElement";
  elementType="ERROR_ELEMENT";
}
  :
    IDENTIFIER?
    | LBRACE
    | RBRACE
    | LPAREN
    | RPAREN
    | LBRACKET
    | RBRACKET
    | COMMA
    | SEMICOLON
    | COLON

    | QUESTION_MARK
    
    | LT
    | GT
    | LTEQ
    | GTEQ
    | EQEQ
    | NOTEQ

    | EQUALS

    | PLUS
    | MINUS
    | MULTIPLY
    | DIVIDE
    | MODULO

    | MULTEQ
    | DIVEQ
    | PERCEQ
    | PLUSEQ
    | MINUSEQ

    | TILDE
    | LTLT
    | GTGT
    | XOR
    | OR
    | AND
    | ANDAND
    | OROR
    | NEGATE

    | LTLTEQ
    | GTGTEQ
    | ANDEQ
    | XOREQ
    | OREQ

    | PLUSPLUS
    | MINUSMINUS

    | FALSE_KEYWORD
    | TRUE_KEYWORD
    
    | STRUCT_KEYWORD

    | RETURN_KEYWORD
    | REGISTER_KEYWORD
    | PACKOFFSET_KEYWORD
    | ASM_KEYWORD

    | BREAK_KEYWORD
    | CASE_KEYWORD
    | CONTINUE_KEYWORD
    | DEFAULT_KEYWORD
    | DISCARD_KEYWORD
    | DO_KEYWORD
    | FOR_KEYWORD
    | IF_KEYWORD
    | ELSE_KEYWORD
    | SWITCH_KEYWORD
    | WHILE_KEYWORD

    | INLINE_KEYWORD

    | EXTERN_KEYWORD
    | NOINTERPOLATION_KEYWORD
    | PRECISE_KEYWORD
    | SHARED_KEYWORD
    | GROUPSHARED_KEYWORD
    | STATIC_KEYWORD
    | UNIFORM_KEYWORD
    | VOLATILE_KEYWORD

    | CONST_KEYWORD
    | ROW_MAJOR_KEYWORD
    | COLUMN_MAJOR_KEYWORD

    | IN_KEYWORD
    | INOUT_KEYWORD
    | OUT_KEYWORD    

    | DIRECTIVE
    | DIRECTIVE_CONTENT

    | ASM_KEYWORD
    | ASM_CONTENT

    | VOID_KEYWORD

    | SCALAR_TYPE
    | VECTOR_TYPE
    | MATRIX_TYPE

    | TEXTURE_KEYWORD
    | TEXTURE1D_KEYWORD
    | TEXTURE1DARRAY_KEYWORD
    | TEXTURE2D_KEYWORD
    | TEXTURE2DARRAY_KEYWORD
    | TEXTURE3D_KEYWORD
    | TEXTURECUBE_KEYWORD

    | BUFFER_KEYWORD
    | STRUCTUREDBUFFER_KEYWORD
  ;

errorhandling cgFile
options
{
  stubBase="CgFileElement";
}
  :    
    (
      declaration
    )*
  ;

errorhandling directiveForceFollows
:
  directive
  (errorElement | WHITESPACE | NEW_LINE)
;

errorhandling directive
  :    
    DIRECTIVE<CG_DIRECTIVE_HEADER, HeaderNode>
    DIRECTIVE_CONTENT<CG_DIRECTIVE_CONTENT, ContentNode>?
  ;

/* TODO: this actually allows for something like
    static const MACRO_KEY
*/
errorhandling declaration
  :       
      structDeclaration
      | 
      (
        !(#attr:attribute)?
        !(#modifiers:modifierKeywordList)?
        (
          (
            !(#id:identifier)
            (
              macroCall[id]
              | variableOrFunctionDeclaration[attr, modifiers, id]
            )
          )
          |
          (
            !(#type:builtInType)
            variableOrFunctionDeclaration[attr, modifiers, type]
          )
        )
      )
  ;

variableOrFunctionDeclaration[attribute attr, modifierKeywordList modifiers, typeName type]
  :
    !(#name:identifier)
    (          
      (
       variableDeclaration[modifiers, type, name]
       SEMICOLON
      )
      | functionDeclaration[attr, modifiers, type, name]
    )
  ;

// TODO: hack, macro call (e.g. CBUFFER_START(x), or CBUFFER_END)
// or UNITY_DECLARE_SHADOWMAP(_ShadowMapTexture); <- has the semicolon
macroCall[identifier id]
  :
    &id
    callOperator?
    SEMICOLON?
  ;

// TODO: split into var and function keywords?
modifierKeywordList
  : 
    (
      // storage class
      INLINE_KEYWORD 

      // storage class, variable only
      | EXTERN_KEYWORD
      | NOINTERPOLATION_KEYWORD
      | PRECISE_KEYWORD // can be in function decl
      | SHARED_KEYWORD
      | GROUPSHARED_KEYWORD
      | STATIC_KEYWORD
      | UNIFORM_KEYWORD
      | VOLATILE_KEYWORD

      // type modifier, variable only
      | CONST_KEYWORD
      | ROW_MAJOR_KEYWORD
      | COLUMN_MAJOR_KEYWORD

      // used for function arguments
      | IN_KEYWORD
      | INOUT_KEYWORD
      | OUT_KEYWORD    
    )+
  ;

/* 
  struct foo {
    float field;
  };
*/
structDeclaration
  :
    STRUCT_KEYWORD
    identifier<CG_NAME, NameNode>
    LBRACE
    structFieldList
    RBRACE
    SEMICOLON
  ;

identifier
  :
    IDENTIFIER<CG_NAME, NameToken>
  ;

structFieldList
  :
    (
      fieldDeclaration
    )*
  ;

// TODO: hack for macros (e.g. UNITY_VERTEX_INPUT_INSTANCE_ID)
errorhandling fieldDeclaration
  :
    !(#modifiers:modifierKeywordList)?
    (
      (
        !(#id:identifier)
        (
          (
            !(#name:identifier)
            variableDeclaration<CG_CONTENT, ContentNode>[modifiers, id, name]
            SEMICOLON
          )
          | macroCall[id]
        )
      ) 
      |
      (
        !(#type:builtInType)
        (
          !(#name:identifier)
          variableDeclaration<CG_CONTENT, ContentNode>[modifiers, type, name]
          SEMICOLON
        )
      )
    )
  ;

// TODO: buffer types
// tex2D<float>
interface typeName
  :
    builtInType
    | typeReference
  ;

builtInType
  :
    VOID_KEYWORD

    | SCALAR_TYPE
    | VECTOR_TYPE
    | MATRIX_TYPE

    | TEXTURE_KEYWORD
    | TEXTURE1D_KEYWORD
    | TEXTURE1DARRAY_KEYWORD
    | TEXTURE2D_KEYWORD
    | TEXTURE2DARRAY_KEYWORD
    | TEXTURE3D_KEYWORD
    | TEXTURECUBE_KEYWORD

    | bufferType
  ;

bufferType
  :
    (
      BUFFER_KEYWORD
      | STRUCTUREDBUFFER_KEYWORD
    )
    LT
    typeName // TODO: by spec this can only be scalar, vector and some of the matrix types: highlight this on syntax HL stage
    GT
  ;

interface typeReference
  :
    identifier
  ;

semantic // e.g. TEXCOORD, COLOR
  :
    IDENTIFIER<CG_NAME, NameNode> // checked on SyntaxHL stage as this context-sensitive keyword, e.g. `float color : color` is perfectly fine
  ;

/*
  [modifiers]
  type
  (
    name  
    [array op]
    [semantic/register/packoffset]*
    [annotations]
    [initializer]
  ) <- comma declaration possible
 */
errorhandling singleVariableDeclaration[modifierKeywordList modifiers, typeName type, identifier name]
  :
    &modifiers?
    &type<CG_TYPE, TypeNode>
    &name<CG_NAME, NameNodes>
    variableDeclarationTail
  ;

errorhandling variableDeclaration[modifierKeywordList modifiers, typeName type, identifier name]
  :
    singleVariableDeclaration<CG_CONTENT, FirstVariableNode>[modifiers, type, name]
    (
      COMMA
      identifier<CG_NAME, NameNodes>
      variableDeclarationTail
    )*
  ;

variableDeclarationTail
  :
    arrayOperator?
    (
      COLON
      (
        semantic
        | register
        | packoffset
      )
    )*
    (
      EQUALS
      assignmentExpression
    )?
  ;

// TODO: syntax errors for incorrect params
register
  :
    REGISTER_KEYWORD
    callOperator
  ;

// TODO: syntax errors for incorrect params
packoffset
  :
    PACKOFFSET_KEYWORD
    callOperator  
  ;

// TODO: custom parse function to unwrap all this stuff
// TODO: proper precedence
errorhandling expression
  :
    commaExpression
  ;

commaExpression
  :
    assignmentExpression
    (
      COMMA
      commaExpression
    )*
  ;

assignmentExpression
  :
    ternaryExpression
    (
      assignmentOperator
      assignmentExpression      
    )*
  ;

assignmentOperator
  :
    EQUALS
    | MULTEQ
    | DIVEQ
    | PLUSEQ
    | MINUSEQ
    | PERCEQ

    | LTLTEQ
    | GTGTEQ
    | ANDEQ
    | XOREQ
    | OREQ
  ;

ternaryExpression
  :
    binaryExpression
    (
      QUESTION_MARK
      ternaryExpression
      COLON
      ternaryExpression
    )*
  ;

binaryExpression
  :
    prefixExpression
    (
      binaryOperator? // TODO: hack for casting, fix with proper parsing
      binaryExpression
    )*
  ;

binaryOperator
  :
    LT
    | GT
    | LTEQ
    | GTEQ
    | EQEQ
    | NOTEQ

    | PLUS
    | MINUS
    | MULTIPLY
    | DIVIDE
    | MODULO

    | TILDE
    | LTLT
    | GTGT
    | XOR
    | OR
    | AND
    | ANDAND
    | OROR
  ;

// TODO: cast operator
// (float)
prefixExpression
  :
    postfixExpression
    | 
    (
      prefixOperator
      prefixExpression
    )*
  ;

prefixOperator
  :
    NEGATE
    | TILDE
    | PLUS
    | MINUS
    | PLUSPLUS
    | MINUSMINUS
  ;

postfixExpression
  :
    primaryExpression<CG_OPERAND, OperandNode>
    (
      postfixOperator<CG_OPERATOR, OperatorNode>
    )*
  ;

interface postfixOperator
  :
    incrementOperator
    | decrementOperator
    | arrayOperator
    | callOperator
    | fieldOperator
  ;

incrementOperator
  :
    PLUSPLUS
  ;

decrementOperator
  :
    MINUSMINUS
  ;

arrayOperator
  :
    LBRACKET expression RBRACKET
  ;

callOperator
  :
    LPAREN
    (
      expression
      (
        COMMA
        expression
      )*
    )?
    RPAREN
  ;

fieldOperator
  :
    DOT
    identifier<CG_OPERAND, FieldNode>
  ;

interface primaryExpression
  :
    constantValue
    | runtimeValue
    | parensExpression
  ;

interface runtimeValue
  :
    builtInType // TODO: constructor call, e.g. float4(1,2,3,4)
    | identifier // TODO: may be variable reference or function name
    | vectorInitExpression
    | matrixInitExpression
  ;

vectorInitExpression
  :
    LBRACE
    (
      expression
      (
        COMMA
        expression
      )*
    )
    RBRACE
  ;

matrixInitExpression
  :
    LBRACE
      vectorInitExpression
      (
        COMMA
        vectorInitExpression
      )*
    RBRACE
  ;

parensExpression
  :
    LPAREN
    expression
    RPAREN
  ;

constantValue
  :
    NUMERIC_LITERAL
    | FALSE_KEYWORD
    | TRUE_KEYWORD
  ;

/* void foo(arg1, arg2){
    ...
   }
*/

// function can have semantics
// fixed4 frag (v2f i, UNITY_VPOS_TYPE screenPos : VPOS) : SV_Target
//
// function can have specifiers (TODO: look up proper name in docs)
functionDeclaration[attribute attr, modifierKeywordList modifiers, typeName type, identifier name]
  :
    &attr?
    functionHeader<CG_CONTENT, HeaderNode>[modifiers, type, name]
    functionBody
  ;

// e.g.: numthreads(1,2)
// documented in Shader Model 5
errorhandling attribute
  :
    (
      LBRACKET
      identifier<CG_NAME, NameNode>
      callOperator? // TODO: not sure whether this is required
      RBRACKET
    )+
  ;

errorhandling functionHeader[modifierKeywordList modifiers, typeName type, identifier name]
  :
    &modifiers?
    &type<CG_TYPE, TypeNode>
    &name<CG_NAME, NameNode>
    LPAREN
    functionArgList?    
    RPAREN
    (
      COLON
      semantic
    )?
  ;

functionArgList
  :    
    argument
    (
      COMMA
      argument
    )*    
  ;

// argument can have semantics
// UNITY_VPOS_TYPE x : VPOS
// argument can have input modifier
// uniform int x
// argument can have initial value
// bool x = false
argument
  :
    !(#modifiers:modifierKeywordList)?
    !(#type:typeName)
    !(#name:identifier)
    singleVariableDeclaration<CG_CONTENT, VariableNode>[modifiers, type, name]
  ;

functionBody
  :
    blockStatement
  ;

errorhandling blockStatement
  :
    LBRACE
    (
      statement
    )*
    RBRACE
  ;

errorhandling statement
  :
    blockStatement
    | flowControlStatement
    | returnStatement
    | asmStatement
    |   
    !(#modifiers:modifierKeywordList)?
    (
      (
        !(#type:typeName)
        (
          (
            variableDeclarationStatement[modifiers, type]
            SEMICOLON
          )
          | 
          (
            expressionStatement[type]
            SEMICOLON?  // TODO: hack (PP macro call e.g. UNITY_BRANCH)
          )
        )
      ) | SEMICOLON
    )
  ;

errorhandling asmStatement
  :
    ASM_KEYWORD
    LBRACE
    ASM_CONTENT<CG_CONTENT, ContentNode>?
    RBRACE
    SEMICOLON
  ;

/* TODO: flow control statement can have attributes,
 e.g. fastopt for doStatment:
  fastopt do {
  } while (1); */
interface flowControlStatement
  :
    ifStatement
    | forStatement
    | doStatement
    | whileStatement
    | switchStatement
    | continueStatement
    | breakStatement
    | discardStatement
  ;

ifStatement
  :
    IF_KEYWORD
    LPAREN
    expression
    RPAREN
    statement
    elseStatement?
  ;

elseStatement
  :
    ELSE_KEYWORD
    statement
  ;

forStatement
  :
    forStatementHeader
    statement
  ;

// TODO: HLSL spec says that for statement can have attributes (e.g. unroll)
// TODO: this technically allows for flow control statements inside of the initializer
errorhandling forStatementHeader
  :
    FOR_KEYWORD
    LPAREN
    statement
    expression?
    SEMICOLON
    expression?
    RPAREN
  ;

doStatement
  :
    DO_KEYWORD
    blockStatement
    WHILE_KEYWORD
    LPAREN
    expression // TODO: syntax error if not conditional
    RPAREN
    SEMICOLON    
  ;

whileStatement
  :
    WHILE_KEYWORD
    LPAREN
    expression
    RPAREN  
    blockStatement
  ;

switchStatement
  :
    SWITCH_KEYWORD    
    LPAREN
    expression // TODO: can only be a variable?
    RPAREN
    LBRACE
    switchBodyCase*
    switchBodyDefault
    RBRACE
  ;

errorhandling switchBodyCase
  :
    CASE_KEYWORD
    expression
    COLON
    statement*
    breakStatement? // TODO: not needed if we have a return statement
  ;

errorhandling switchBodyDefault
  :
    DEFAULT_KEYWORD
    COLON
    statement*
    breakStatement?
  ;

continueStatement
  :
    CONTINUE_KEYWORD
    SEMICOLON
  ;

breakStatement
  :
    BREAK_KEYWORD
    SEMICOLON
  ;

discardStatement
  :
    DISCARD_KEYWORD
    SEMICOLON
  ;

variableDeclarationStatement[modifierKeywordList modifiers, typeName type]
  :
    !(#name:identifier)
    variableDeclaration[modifiers, type, name]
  ;

expressionStatement[typeName type]
  :
    &type // typeName is an interface for an identifier
    ( 
      fieldOperator
      | arrayOperator
      | callOperator
    )*
    (
      assignmentOperator
      commaExpression
    )*
  ;

returnStatement
  :
    RETURN_KEYWORD
    expression?
    SEMICOLON
  ;