<assembly name="UnityEngine.CoreModule">

  <!-- Nullness -->
  <member name="P:UnityEngine.Component.transform">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:UnityEngine.Component.gameObject">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:UnityEngine.GameObject.transform">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:UnityEngine.Object.name">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>


  <!-- UnityEngine.Object -->
  <!-- Tell R#'s analysis engine to ignore our custom equality members. See RSRP-468462 -->
  <member name="M:UnityEngine.Object.op_Equality(UnityEngine.Object,UnityEngine.Object)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>x: null, y: null =&gt; true</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Object.op_Inequality(UnityEngine.Object,UnityEngine.Object)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>x: null, y: null =&gt; false</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Object.op_Implicit(UnityEngine.Object)~System.Boolean">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>null =&gt; false;</argument>
    </attribute>
  </member>

  <!-- UnityEngine.Camera -->
  <member name="P:UnityEngine.Camera.main">
    <!-- https://docs.unity3d.com/ScriptReference/Camera-main.html - "Returns null if there is no camera tagged 'MainCamera' in the scene" -->
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
  </member>


  <!-- UnityEngine.GameObject -->
  <member name="M:UnityEngine.GameObject.AddComponent``1">
    <typeparameter name="T">
      <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
        <!-- ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature = 8 -->
        <argument>8</argument>
      </attribute>
    </typeparameter>
  </member>


  <!-- UnityEngine.ScriptableObject -->
  <member name="M:UnityEngine.ScriptableObject.CreateInstance``1">
    <typeparameter name="T">
      <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
        <!-- ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature = 8 -->
        <argument>8</argument>
      </attribute>
    </typeparameter>
  </member>

  <!-- Assertion methods -->

  <!-- UnityEngine.Assertions.Assert -->
  <member name="M:UnityEngine.Assertions.Assert.IsTrue(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsTrue(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsFalse(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:true=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsFalse(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:true=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreEqual``1(``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreEqual``1(``0,``0,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreEqual(UnityEngine.Object,UnityEngine.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreNotEqual``1(``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreNotEqual``1(``0,``0,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(UnityEngine.Object,UnityEngine.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsNull``1(``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:notnull =&gt; halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsNull``1(``0,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:notnull =&gt; halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsNull(UnityEngine.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:notnull =&gt; halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsNotNull``1(``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:null =&gt; halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsNotNull``1(``0,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:null =&gt; halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Assert.IsNotNull(UnityEngine.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:null =&gt; halt</argument>
    </attribute>
  </member>


  <!-- UnityEngine.Assertions.Must -->
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeTrue(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeTrue(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeFalse(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:true=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeFalse(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>value:true=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeApproximatelyEqual(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeApproximatelyEqual(System.Single,System.Single,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeApproximatelyEqual(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeApproximatelyEqual(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeApproximatelyEqual(System.Single,System.Single,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeApproximatelyEqual(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeEqual``1(``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeEqual``1(``0,``0,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeEqual``1(``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeEqual``1(``0,``0,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeNull``1(``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>expected:notnull =&gt; halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeNull``1(``0,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>expected:notnull =&gt; halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeNull``1(``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>expected:null =&gt; halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeNull``1(``0,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>expected:null =&gt; halt</argument>
    </attribute>
  </member>


  <!-- UnityEngine.Debug -->
  <member name="M:UnityEngine.Debug.Assert(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.Assert(System.Boolean,UnityEngine.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.Assert(System.Boolean,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.Assert(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.Assert(System.Boolean,System.Object,UnityEngine.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.Assert(System.Boolean,System.String,UnityEngine.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.AssertFormat(System.Boolean,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.AssertFormat(System.Boolean,UnityEngine.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false=&gt;halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.LogAssertionFormat(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.LogAssertionFormat(UnityEngine.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.LogErrorFormat(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.LogErrorFormat(UnityEngine.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.LogFormat(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.LogFormat(UnityEngine.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.LogWarningFormat(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.Debug.LogWarningFormat(UnityEngine.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>


  <!-- String formatting -->
  <member name="M:UnityEngine.ILogger.LogFormat(UnityEngine.LogType,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:UnityEngine.UnityString.Format(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>fmt</argument>
    </attribute>
  </member>


  <!-- Pure methods - must use return value -->
  <member name="M:UnityEngine.Mathf.Abs(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Abs(System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Acos(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Approximately(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Atan(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Atan2(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Ceil(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.CeilToInt(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Clamp01(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.ClosestPowerOfTwo(System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.CorrelatedColorTemperatureToRGB(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Cos(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.DeltaAngle(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Exp(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.FloatToHalf(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Floor(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.FloorToInt(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Gamma(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.GammaToLinearSpace(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.HalfToFloat(System.UInt16)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.IsPowerOfTwo(System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Lerp(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.LerpUnclamped(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.LinearToGammaSpace(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Log(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Log(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Log10(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Sin(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Max(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Max(System.Single[])">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Max(System.Int32,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Max(System.Int32[])">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Min(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Min(System.Single[])">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Min(System.Int32,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Min(System.Int32[])">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.MoveTowards(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.MoveTowardsAngle(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.NextPowerOfTwo(System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.PerlinNoise(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.PingPong(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Pow(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Repeat(System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Round(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.RoundToInt(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Sign(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Sqrt(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Mathf.Tan(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Bounds.Intersects(UnityEngine.Bounds)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Bounds.IntersectRay(UnityEngine.Ray)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Bounds.IntersectRay(UnityEngine.Ray,System.Single@)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Bounds.Contains(UnityEngine.Vector3)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Bounds.SqrDistance(UnityEngine.Vector3)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Bounds.ClosestPoint(UnityEngine.Vector3)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.BoundsInt.Contains(UnityEngine.Vector3Int)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Plane.Translate(UnityEngine.Plane,UnityEngine.Vector3) ">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Plane.ClosestPointOnPlane(UnityEngine.Vector3)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Plane.GetDistanceToPoint(UnityEngine.Vector3)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Plane.GetSide(UnityEngine.Vector3)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Plane.SameSide(UnityEngine.Vector3,UnityEngine.Vector3)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Plane.Raycast(UnityEngine.Ray,System.Single@)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>

  <member name="M:UnityEngine.Ray.GetPoint(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Ray2D.GetPoint(System.Single)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector2)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector3)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector3,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Rect.Overlaps(UnityEngine.Rect)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Rect.Overlaps(UnityEngine.Rect,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Rect.NormalizedToPoint(UnityEngine.Rect, UnityEngine.Vector2)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.Rect.PointToNormalized(UnityEngine.Rect, UnityEngine.Vector2)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.RectInt.Contains(UnityEngine.Vector2Int)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>
  <member name="M:UnityEngine.RectInt.Overlaps(UnityEngine.RectInt)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
  </member>


  <!-- Attribute usage. Grouped by namespace -->

  <!-- N:Unity (note that this namespace does not exist in UnityEngine.dll) -->
  <member name="T:Unity.Collections.LowLevel.Unsafe.NativeSetThreadIndexAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
      <!-- ImplicitUseKindFlags.Assign = 2 -->
      <argument>2</argument>
    </attribute>
  </member>

  <!-- N:UnityEngine -->
  <member name="T:UnityEngine.AddComponentMenu">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.MonoBehaviour</argument>
    </attribute>
  </member>
  <member name="T:UnityEngine.ContextMenu">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor"/>
  </member>
  <member name="T:UnityEngine.CreateAssetMenuAttribute">
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.ScriptableObject</argument>
    </attribute>
  </member>
  <member name="T:UnityEngine.DisallowMultipleComponent">
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.MonoBehaviour</argument>
    </attribute>
  </member>
  <!-- ExecuteAlways is used for both MonoBehaviour and DOTS systems
       > Unity.Entities.SystemBase derived system although I suppose ComponentSystemBase would be a better test since
       > that would also cover ComponentSystem and JobComponentSystem variants
       Leaving this commented rather than deleting so we don't make the same mistake again (tests would be better, but
       we don't test absence of a warning)
  <member name="T:UnityEngine.ExecuteAlways">
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.MonoBehaviour</argument>
    </attribute>
  </member> -->
  <member name="T:UnityEngine.ExecuteInEditMode">
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.MonoBehaviour</argument>
    </attribute>
  </member>
  <member name="T:UnityEngine.ImageEffectAllowedInSceneView">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.Component</argument>
    </attribute>
  </member>
  <member name="T:UnityEngine.PreferBinarySerialization">
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.ScriptableObject</argument>
    </attribute>
  </member>
  <member name="T:UnityEngine.RequireComponent">
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.Component</argument>
    </attribute>
  </member>
  <member name="T:UnityEngine.RuntimeInitializeOnLoadMethodAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor"/>
  </member>
  <member name="T:UnityEngine.SelectionBaseAttribute">
    <attribute ctor="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <argument>UnityEngine.MonoBehaviour</argument>
    </attribute>
  </member>

  <!-- N:UnityEngine.Scripting -->
  <member name="T:UnityEngine.Scripting.PreserveAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor"/>
  </member>

  <!-- N:AOT -->
  <member name="T:AOT.MonoPInvokeCallbackAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor"/>
  </member>
</assembly>
