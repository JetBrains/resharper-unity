<?xml version="1.0" encoding="utf-8"?>
<Errors language="C#" configurableSeverityImplementationLanguage="CSHARP"
        baseClass="UnityPerformanceHighlightingBase">

  <Usings>
    JetBrains.ReSharper.Psi.CSharp;
    JetBrains.ReSharper.Psi.CSharp.Tree;
    JetBrains.ReSharper.Plugins.Unity.CSharp.Daemon.Errors;
    JetBrains.ReSharper.Plugins.Unity.CSharp.Daemon.Stages.Highlightings;
    JetBrains.ReSharper.Plugins.Unity.CSharp.Psi.Resolve;
    JetBrains.ReSharper.Plugins.Unity.CSharp.Daemon.Stages.PerformanceCriticalCodeAnalysis.Highlightings;
  </Usings>
  
  <SeverityConfiguration>
    <Group name="UnityHighlightingGroupIds.UnityPerformance">
      <Tag externalName="InefficientMultiplicationOrderWarning.HIGHLIGHTING_ID"
           default="WARNING">
        <Title>Order of multiplication operations is inefficient</Title>
        <Description>Reordering multiplication operations will improve performance</Description>
      </Tag>
      <Tag externalName="InefficientMultidimensionalArrayUsageWarning.HIGHLIGHTING_ID" default="WARNING">
        <Title>Use jagged or one-dimensional array instead of multidimensional array</Title>
        <Description>
          Multidimensional array element access is converted to a method call. It is more efficient to use a jagged or one-dimensional array.
        </Description>
      </Tag>
      <Tag externalName="UnityPerformanceInvocationWarning.HIGHLIGHTING_ID" default="HINT">
        <Title>Expensive method invocation</Title>
        <Description>
          This method call is inefficient when called inside a performance critical context.
        </Description>
      </Tag>
      <Tag externalName="UnityPerformanceNullComparisonWarning.HIGHLIGHTING_ID" default="HINT">
        <Title>Expensive null comparison</Title>
        <Description>
          Equality operations on objects deriving from 'UnityEngine.Object' will also check that the underlying native object has not been destroyed. This requires a call into native code and can have a performance impact when used inside frequently called methods.
        </Description>
      </Tag>
      <Tag externalName="UnityPerformanceCameraMainWarning.HIGHLIGHTING_ID" default="HINT">
        <Title>'Camera.main' is expensive</Title>
        <Description>
          'Camera.main' is slow and does not cache its result. Using 'Camera.main' in frequently called methods is very inefficient. Prefer caching the result in 'Start()' or 'Awake()'.
        </Description>
      </Tag>
    </Group>
  </SeverityConfiguration>

  <Warning name="InefficientMultidimensionalArrayUsage" configurableSeverity="Unity.InefficientMultidimensionalArrayUsage">\
    <Parameter type="List&lt;ITreeNodePointer&lt;ITreeNode&gt;&gt;" name="usages" isValid="skip" />
    <Parameter type="IArrayCreationExpression" name="arrayCreationExpression" isValid="skip"/>
    <Parameter type="IVariableDeclaration" name="variableDeclaration" />
    <Parameter type="IMultipleDeclaration" name="multiplyDeclaration" />
    <Parameter type="DocumentRange" name="highlightingRange" />
    <Message value="Accessing multidimensional arrays is inefficient. Use a jagged or one-dimensional array instead" />
    <Range>HighlightingRange</Range>
    <Behavour overlapResolvePolicy="NONE" qualifiedAttributeID="PerformanceHighlightingAttributeIds.INEFFICIENT_MULTIDIMENSIONAL_ARRAYS_USAGE"/>
  </Warning>

  <Warning name="InefficientMultiplicationOrder" configurableSeverity="Unity.InefficientMultiplicationOrder">
    <Parameter type="ICSharpExpression" name="expression"/>
    <Parameter type="List&lt;ICSharpExpression&gt;" name="scalars" isValid="skip"/>
    <Parameter type="List&lt;ICSharpExpression&gt;" name="matrices" isValid="skip"/>
    <Message value="Order of multiplication operations is inefficient" />
    <Range>Expression.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="NONE" qualifiedAttributeID="PerformanceHighlightingAttributeIds.INEFFICIENT_MULTIPLICATION_ORDER"/>
  </Warning>

  <Warning name="UnityPerformanceInvocation" configurableSeverity="Unity.PerformanceCriticalCodeInvocation">
    <Parameter type="IInvocationExpression" name="invocationExpression" isValid="skip"/>
    <Parameter type="IReference" name="reference"/>
    <Message value="Expensive method invocation" />
    <Range>Reference.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="NONE" qualifiedAttributeID="PerformanceHighlightingAttributeIds.COSTLY_METHOD_INVOCATION"/>
  </Warning>

  <Warning name="UnityPerformanceNullComparison" configurableSeverity="Unity.PerformanceCriticalCodeNullComparison">
    <Parameter type="ICSharpExpression" name="expression" isValid="skip"/>
    <Parameter type="string" name="fieldName" isValid="skip"/>
    <Parameter type="IReference" name="reference"/>
    <Message value="Comparison to 'null' is expensive" />
    <Range>Reference.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="NONE" qualifiedAttributeID="PerformanceHighlightingAttributeIds.NULL_COMPARISON"/>
  </Warning>

  <Warning name="UnityPerformanceCameraMain" configurableSeverity="Unity.PerformanceCriticalCodeCameraMain">
    <Parameter type="IReferenceExpression" name="referenceExpression"/>
    <Message value="'Camera.main' is expensive" />
    <Range>ReferenceExpression.GetDocumentRange()</Range>
    <Behavour overlapResolvePolicy="NONE" qualifiedAttributeID="PerformanceHighlightingAttributeIds.CAMERA_MAIN"/>
  </Warning>
  
</Errors>