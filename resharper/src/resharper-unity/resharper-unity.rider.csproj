<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <PropertyGroup>
    <TargetFramework>net452</TargetFramework>
    <AssemblyName>JetBrains.ReSharper.Plugins.Unity</AssemblyName>
    <RootNamespace>JetBrains.ReSharper.Plugins.Unity</RootNamespace>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;NET452;JET_MODE_ASSERT;RIDER</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>TRACE;RELEASE;NET452;RIDER</DefineConstants>
  </PropertyGroup>
  <!-- ShaderLab language -->
  <PropertyGroup>
    <!-- Write to the same location as wave08.
         Not ideal, but required, as the ParserGen targets uses Assembly.LoadFrom
         on PsiGen.exe, which ends up reusing the wave08 version in memory rather
         than loading the requested one. If we change the task to use Assembly.LoadFile
         instead, we load the correct PsiGen.exe, but then NVelocity uses Assembly.Load
         and gets the wrong PsiGen.exe and gets the wrong templates.
         Furthermore, the GenerateParserGen_AddToItemGroups target has the same problem
         with the RemoveItemsInFolderTaskStub. We can override that target directly
         as a workaround. See below -->
    <ParserGenOutputBase>$(MSBuildThisFileDirectory)\_Generated</ParserGenOutputBase>
  </PropertyGroup>
  <ItemGroup>
    <PsiLanguageNames Include="ShaderLab">
      <Visible>False</Visible>
    </PsiLanguageNames>
    <CsLex Include="Psi\ShaderLab\Parsing\ShaderLab.lex" />
    <None Remove="Psi\ShaderLab\Parsing\ShaderLab_lex.depends" />
    <Compile Update="Psi\ShaderLab\Parsing\ShaderLab_lex.cs">
      <DependentUpon>ShaderLab.lex</DependentUpon>
    </Compile>
    <TokenGenerator Include="Psi\ShaderLab\Parsing\ShaderLabTokenType.Tokens.xml">
      <OutputFile>Psi\ShaderLab\Parsing\ShaderLabTokenType.Tokens.generated.cs</OutputFile>
    </TokenGenerator>
    <Compile Update="Psi\ShaderLab\Parsing\ShaderLabTokenType.Tokens.generated.cs">
      <DependentUpon>ShaderLabTokenType.Tokens.xml</DependentUpon>
    </Compile>
    <ParserGen Include="Psi\ShaderLab\Parsing\ShaderLab.psi" />
  </ItemGroup>
  <!-- Resources - Unity3dRider, api.xml, icons -->
  <ItemGroup>
    <Compile Remove="Unity3dRider\Assets\Plugins\Editor\JetBrains\RiderAssetPostprocessor.cs" />
    <Compile Remove="Unity3dRider\Assets\Plugins\Editor\JetBrains\RiderPlugin.cs" />
    <Compile Remove="Unity3dRider\Assets\Plugins\Editor\JetBrains\Unity3DRider.cs" />
    <None Include="Unity3dRider\Assets\Plugins\Editor\JetBrains\RiderAssetPostprocessor.cs" />
    <None Include="Unity3dRider\Assets\Plugins\Editor\JetBrains\RiderPlugin.cs" />
    <EmbeddedResource Include="Unity3dRider\Assets\Plugins\Editor\JetBrains\Unity3DRider.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Remove="api.xml" />
    <EmbeddedResource Include="api.xml" />
  </ItemGroup>
  <ItemGroup>
    <!-- This requires WPF and PresentationFramework to build -->
    <ThemedIconsXamlV3 Include="Resources\Logo\unity-logo.xaml" Condition=" '$(OS)' != 'Unix' ">
      <ThemeColumns>Gray;GrayDark;Color</ThemeColumns>
      <RemoveBackgroundElement>False</RemoveBackgroundElement>
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </ThemedIconsXamlV3>
  </ItemGroup>
  <!-- References -->
  <ItemGroup>
    <!-- It would be nice to use floating versions here during EAP, but that would require fixed
         version major, minor and patch numbers, e.g. 2017.1.0-* or it will match incorrectly
         See https://github.com/NuGet/Home/issues/4859-->
    <PackageReference Include="JetBrains.Rider.SDK" Version="$(RiderSDKVersion)" />
    <Reference Include="PresentationCore" Condition=" '$(OS)' != 'Unix' " />
    <Reference Include="PresentationFramework" Condition=" '$(OS)' != 'Unix' " />
    <Reference Include="System.Xaml" />
    <Reference Include="WindowsBase" />
  </ItemGroup>
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <!-- The original version of this can fail if wave08 is compiled first - the wrong
       PsiGen.exe is resolved from Assembly.LoadFrom. I don't think we really need to
       do anything here other than record the newly written files for clean - the new
       .csproj files will automatically update the Compile folder -->
  <Target Name="GenerateParserGen_AddToItemGroups">
    <!-- Stage 1: collect the generated files, ParserGenOutputSrc item group. -->
    <ItemGroup>
      <!-- Clean prev run results (if more than one parsergen in this project). -->
      <ParserGenOutputSrc Remove="%(ParserGenOutputSrc.Identity)" />
      <!-- Re-query for the files generated during the run. -->
      <ParserGenOutputSrc Include="$(ParserGenOutputBase)/Parsing/%(PsiLanguageNames.Identity)/**/*">
        <AutoGen>True</AutoGen>
      </ParserGenOutputSrc>
      <ParserGenOutputSrc Include="$(ParserGenOutputBase)/Psi/%(PsiLanguageNames.Identity)/**/*">
        <AutoGen>True</AutoGen>
      </ParserGenOutputSrc>
      <ParserGenOutputSrc Include="$(ParserGenOutputBase)/Psi/Test/%(PsiLanguageNames.Identity)/**/*">
        <AutoGen>True</AutoGen>
      </ParserGenOutputSrc>
      <!-- Support incremental clean for our files. -->
      <FileWrites Include="%(ParserGenOutputSrc.FullPath)" />
    </ItemGroup>
  </Target>
  <ItemGroup>
    <!-- The JetBrains.Psi.Features.Tasks 108.0.20170615.212549-eap08 package incorrectly
         includes $(PsiGenToolsDir)/TokenGenerator.exe in the inputs, but that file doesn't
         exist - $(PsiGenToolsDir)/../TokenGenerator.exe does.
         This is a workaround that ignores changes to the .exe and the .targets
         See RSRP-465228 -->
    <GenerateTokenGeneratorInputs Remove="@(GenerateTokenGeneratorInputs)" />
    <GenerateTokenGeneratorInputs Include="@(TokenGenerator)" />
  </ItemGroup>
</Project>