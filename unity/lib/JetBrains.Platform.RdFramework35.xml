<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.RdFramework35</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Platform.RdFramework.Impl.RdSecureString">
            <summary>
            This is a temporary stub for proper secure strings in protocol
            Unlike a normal string, this one won't be stored in logs or any other string representations of protocol entities
            </summary>
        </member>
        <member name="F:JetBrains.Platform.RdFramework.Impl.SocketWire.Base.TimeoutMs">
            <summary>
            Timeout for <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/>  and for <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)"/>  from socket (to guarantee read_thread termination if <see cref="M:System.Net.Sockets.Socket.Close"/> doesn't
            lead to exception thrown by <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)"/> 
            </summary>
        </member>
        <member name="F:JetBrains.Platform.RdFramework.Impl.SocketWire.Base.Id">
            <summary>
            For logging
            </summary>
        </member>
        <member name="F:JetBrains.Platform.RdFramework.Impl.SocketWire.Base.myLifetime">
            <summary>
            Lifetime of this wire. If counterpart disconnects, lifetime is not terminate automatically.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Impl.SocketWire.Base.ReadArrayFromSocket(System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Reads from <see cref="F:JetBrains.Platform.RdFramework.Impl.SocketWire.Base.mySocket"/> into <see cref="!:res"/>. Uses intermediate array <see cref="!:buffer"/> with boundaries of already read.
            Method <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)"/> will block until we fullfill all <see cref="!:res"/>.length bytes 
              or timeout is thrown (<see cref="T:System.Net.Sockets.SocketException"/> with <see cref="F:System.Net.Sockets.SocketError.TimedOut"/>)
              or exception is thrown because socket is closed (sometimes local shutdown and <see cref="M:System.Net.Sockets.Socket.Close"/> doesn't cause Receive() to throw exception, so we have to use timeout)
              or return 0 bytes if other side invoked <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)"/> (in Java it's socket.outputStream.close())    
            </summary>
            <param name="res">bytes to read, method will return 'true' of it read all res.length bytes</param>
            <param name="buffer">intermediate buffer</param>
            <param name="lo">lower bound of intermediate buffer</param>
            <param name="hi">higher bound of intermediate buffer</param>
            <returns>'True' in case of successufull read. 'False' - socket was shutted down and <see cref="!:hi"/>-<see cref="!:lo"/> is less than <see cref="!:res"/>.length (bufferred content is not enough).</returns>      
        </member>
        <member name="M:JetBrains.Platform.RdFramework.WireBase.SendPkg(JetBrains.Util.PersistentMap.UnsafeWriter.Cookie)">
            <summary>
            Actual send package: len(4 bytes) + id (8 bytes) + payload
            </summary>
            <param name="pkg">Package to transmit</param>
        </member>
    </members>
</doc>
